{ "name": "TJS",
  "fileTypes": ["tjs"],
  "patterns": [
    {
      "include": "#code"
    }
  ],
  "repository": {
    "code": {
      "patterns": [
        { "include": "#comment" },
        { "include": "#preprocessor" },
        { "include": "#definition" },
        { "include": "#control" },
        { "include": "#value" }
      ]
    },
    "expression": {
      "patterns": [
        { "include": "#comment" },
        { "include": "#preprocessor" },
        { "include": "#value" }
      ]
    },
    "preprocessed": {
      "patterns": [
        { "include": "#comment" },
        { "include": "#preprocessor" }
      ]
    },
    "comment": {
      "patterns": [
        {
            "begin": "/\\*",
            "end": "\\*/",
            "name": "comment.block.tjs"
        },
        {
            "begin": "//",
            "end": "$\\n?",
            "name": "comment.line.double-slash.tjs"
        }
      ]
    },
    "preprocessor": {
      "patterns" : [
        {
            "match": "^[ \t]*@set",
            "name": "invalid.deprecated.preprocessor.tjs"
        },
        {
            "match": "^[ \t]*@if",
            "name": "invalid.deprecated.preprocessor.tjs"
        },
        {
            "match": "^[ \t]*@endif",
            "name": "invalid.deprecated.preprocessor.tjs"
        }
      ]
    },
    "definition": {
      "patterns" : [
        {
            "begin": "\\b(class)\\s+(\\w+)(\\s+(extends)\\s*)?",
            "beginCaptures": {
                "1": { "name": "storage.type.class.tjs" },
                "2": { "name": "entity.name.type.tjs" },
                "4": { "name": "storage.type.class.tjs" }
            },
            "end": "$",
            "patterns": [
                { "include": "#expression" }
            ]
        },
        {
            "begin": "\\b(function)\\s+(\\w+)\\s*\\(",
            "end": "\\)(\\s*:\\s*(\\w+))?",
            "beginCaptures": {
                "1": { "name": "storage.type.function.tjs" },
                "2": { "name": "entity.name.function.tjs" }
            },
            "endCaptures": {
                "2": { "name": "entity.name.type.tjs" }
            },
            "patterns": [
                { "include": "#parameter" }
            ]
        },
        {
            "match": "\\b(function)\\s+(\\w+)(\\s*:\\s*(\\w+))?",
            "captures": {
                "1": { "name": "storage.type.function.tjs" },
                "2": { "name": "entity.name.function.tjs" },
                "4": { "name": "entity.name.type.tjs" }
            }
        },
        {
            "match": "\\b(property)\\s+(\\w+)",
            "captures": {
                "1": { "name": "storage.type.property.tjs" },
                "2": { "name": "entity.name.function.property.tjs" }
            }
        },
        {
            "match": "\\b(getter)(?:\\s*\\(\\s*\\))?(\\s*:\\s*(\\w+))?\\b",
            "captures": {
                "1": { "name": "keyword.other.tjs" },
                "3": { "name": "entity.name.type.tjs" }
            }
        },
        {
            "match": "\\b(setter)\\s*\\(\\s*(\\w+)(\\s*:\\s*(\\w+))?",
            "captures": {
                "1": { "name": "keyword.other.tjs" },
                "2": { "name": "variable.parameter.tjs" },
                "4": { "name": "entity.name.type.tjs" }
            }
        },
        {
            "begin": "\\b(var|const)\\b",
            "end": ";",
            "beginCaptures": {
                "1": { "name": "storage.type.tjs" }
            },
            "patterns": [
                { "include": "#preprocessed" },
                {
                    "begin": "\\b(\\w+)(\\s*:\\s*(\\w+))?\\b",
                    "end": ",|(?=;)",
                    "beginCaptures": {
                        "1": { "name": "variable.other.tjs" },
                        "3": { "name": "entity.name.type.tjs" }
                    },
                    "patterns": [
                        { "include": "#expression" }
                    ]
                }
            ]
        }
      ]
    },
    "value": {
      "patterns" : [
        {
            "begin": "@\"",
            "end": "(\"|$)",
            "beginCaptures": {
                "0": { "name": "string.quoted.double.literal.tjs" }
            },
            "endCaptures": {
                "0": { "name": "string.quoted.double.literal.tjs" }
            },
            "patterns": [
                { "include": "#interpolation-string" },
                {
                    "match": ".",
                    "name": "string.quoted.double.literal.tjs"
                }
            ]
        },
        {
            "begin": "@'",
            "end": "('|$)",
            "beginCaptures": {
                "0": { "name": "string.quoted.single.literal.tjs" }
            },
            "endCaptures": {
                "0": { "name": "string.quoted.single.literal.tjs" }
            },
            "patterns": [
                { "include": "#interpolation-string" },
                {
                    "match": ".",
                    "name": "string.quoted.single.literal.tjs"
                }
            ]
        },
        {
            "begin": "\"",
            "end": "\"",
            "name": "string.quoted.double.literal.tjs",
            "patterns": [
                {
                    "include": "#string-character-escape"
                }
            ]
        },
        {
            "begin": "'",
            "end": "'",
            "name": "string.quoted.single.literal.tjs",
            "patterns": [
                {
                    "include": "#string-character-escape"
                }
            ]
        },
        {
            "name": "string.regexp.tjs",
            "begin": "(?<!\\+\\+|--|})(?<=[=(:,\\[?+!]|^return|[^\\._$[:alnum:]]return|^case|[^\\._$[:alnum:]]case|=>|&&|\\|\\||\\*\\/)\\s*(\\/)(?![\\/*])(?=(?:[^\\/\\\\\\[\\()]|\\\\.|\\[([^\\]\\\\]|\\\\.)+\\]|\\(([^\\)\\\\]|\\\\.)+\\))+\\/([gimsuy]+|(?![\\/\\*])|(?=\\/\\*))(?!\\s*[a-zA-Z0-9_$]))",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.definition.string.begin.tjs"
                }
            },
            "end": "(/)([gimsuy]*)",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.string.end.tjs"
                },
                "2": {
                    "name": "keyword.other.tjs"
                }
            },
            "patterns": [
                {
                    "include": "#regexp"
                }
            ]
        },
        {
            "name": "string.regexp.tjs",
            "begin": "((?<![_$[:alnum:])\\]]|\\+\\+|--|}|\\*\\/)|((?<=^return|[^\\._$[:alnum:]]return|^case|[^\\._$[:alnum:]]case))\\s*)\\/(?![\\/*])(?=(?:[^\\/\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)+\\])+\\/([gimsuy]+|(?![\\/\\*])|(?=\\/\\*))(?!\\s*[a-zA-Z0-9_$]))",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.tjs"
                }
            },
            "end": "(/)([gimsuy]*)",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.string.end.tjs"
                },
                "2": {
                    "name": "keyword.other.tjs"
                }
            },
            "patterns": [
                {
                    "include": "#regexp"
                }
            ]
        },
        {
            "begin": "<%",
            "end": "%>",
            "patterns": [
                { "include": "#expression" }
            ],
            "name": "constant.octet.literal.tjs"
        },
        {
            "match": "\\b0[xX][0-9a-fA-F.]+(p[+-]?[0-9]*)?\\b",
            "name": "constant.numeric.hexadecimal.literal.tjs"
        },
        {
            "match": "\\b0[0-7][0-7.]*(p[+-]?[0-9]*)?\\b",
            "name": "constant.numeric.octal.literal.tjs"
        },
        {
            "match": "\\b0[bB][0-1.]+(p[+-]?[0-9]*)?\\b",
            "name": "constant.numeric.binary.literal.tjs"
        },
        {
            "match": "(?x)(?<!\\$)(?:(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|(?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|(?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|(?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|(?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|(?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|(?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|(?:\\b[0-9][0-9_]*(n)?\\b(?!\\.)))(?!\\$)",
            "name": "constant.numeric.decimal.literal.tjs"
        },
        {
            "match": "\\b(true|false)\\b",
            "name": "constant.language.boolean.tjs"
        },
        {
            "match": "\\b(null|void|NaN|Infinity)\\b",
            "name": "constant.language.$1.tjs"
        },
        {
            "match": "\\b(this|super|global)\\b",
            "name": "variable.language.tjs"
        },
        {
            "match": "\\b(new|delete|typeof|int|real|string|incontextof|instanceof|invalidate|isvalid|if)\\b",
            "name": "keyword.operator.tjs"
        },
        {
            "match": "\\b(debugger|enum|export|import|in|octet|synchronized|public|protected|private|static)\\b",
            "name": "keyword.other.unused.tjs"
        },
        {
            "begin": "\\b(function)\\s*\\(",
            "end": "\\)(\\s*:\\s*(\\w+))?",
            "beginCaptures": {
                "1": { "name": "storage.type.function.tjs" }
            },
            "endCaptures": {
                "2": { "name": "entity.name.type.tjs" }
            },
            "patterns": [
                { "include": "#parameter" }
            ]
        },
        {
            "match": "\\b(function)(\\s*:\\s*(\\w+))?\\b",
            "captures": {
                "1": { "name": "storage.type.function.tjs" },
                "3": { "name": "entity.name.type.tjs" }
            }
        },
        {
            "begin": "(\\((const)\\)\\s*)?%\\[",
            "end": "\\]",
            "captures": {
                "2": { "name": "keyword.operator.tjs" }
            },
            "name": "meta.dictionary.tjs",
            "patterns": [
                { "include": "#preprocessed" },
                {
                    "begin": "(\\w+)\\s*:",
                    "end": ",|=>|(?=\\])",
                    "beginCaptures": {
                        "1": { "name": "entity.name.tag.dictionary.tjs" }
                    },
                    "patterns": [
                        { "include": "#expression" }
                    ]
                },
                { "include": "#expression" }
            ]
        },
        {
            "begin": "(\\((const)\\)\\s*)?\\[",
            "end": "\\]",
            "captures": {
                "2": { "name": "keyword.operator.tjs" }
            },
            "name": "meta.array.tjs",
            "patterns": [
                { "include": "#expression" }
            ]
        },
        {
            "begin": "\\(",
            "end": "\\)",
            "patterns": [
                { "include": "#code" }
            ]
        },
        {
            "begin": "{",
            "end": "}",
            "patterns": [
                { "include": "#code" }
            ]
        }
      ]
    },
    "string-character-escape": {
        "name": "constant.character.escape.tjs",
        "match": "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\\{[0-9A-Fa-f]+\\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)"
    },
    "control": {
      "patterns" : [
        {
            "match": "\\b(break|case|catch|continue|default|do|else|finally|for|goto|if|return|switch|throw|try|while|with)\\b",
            "name": "keyword.control.tjs"
        }
      ]
    },
    "parameter": {
      "patterns": [
        { "include": "#preprocessed" },
        {
            "begin": "\\b(\\w+)(\\s*:\\s*(\\w+))?\\b",
            "end": ",|(?=\\))",
            "beginCaptures": {
                "1": { "name": "variable.parameter.tjs" },
                "3": { "name": "entity.name.type.tjs" }
            },
            "patterns": [
                { "include": "#expression" }
            ]
        }
      ]
    },
    "interpolation-string": {
      "patterns" : [
        {
            "begin": "(?<!\\\\)\\${",
            "end": "}",
            "patterns": [
                { "include": "#expression" }
            ],
            "name": "meta.embedded.line.tjs"
        },
        {
            "begin": "(?<!\\\\)&",
            "end": ";",
            "patterns": [
                { "include": "#expression" }
            ],
            "name": "meta.embedded.line.tjs"
        }
      ]
    },
    "regexp": {
        "patterns": [
            {
                "name": "keyword.control.anchor.regexp",
                "match": "\\\\[bB]|\\^|\\$"
            },
            {
                "match": "\\\\[1-9]\\d*|\\\\k<([a-zA-Z_$][\\w$]*)>",
                "captures": {
                    "0": {
                        "name": "keyword.other.back-reference.regexp"
                    },
                    "1": {
                        "name": "variable.other.regexp"
                    }
                }
            },
            {
                "name": "keyword.operator.quantifier.regexp",
                "match": "[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??"
            },
            {
                "name": "keyword.operator.or.regexp",
                "match": "\\|"
            },
            {
                "name": "meta.group.assertion.regexp",
                "begin": "(\\()((\\?=)|(\\?!)|(\\?<=)|(\\?<!))",
                "beginCaptures": {
                    "1": {
                        "name": "punctuation.definition.group.regexp"
                    },
                    "2": {
                        "name": "punctuation.definition.group.assertion.regexp"
                    },
                    "3": {
                        "name": "meta.assertion.look-ahead.regexp"
                    },
                    "4": {
                        "name": "meta.assertion.negative-look-ahead.regexp"
                    },
                    "5": {
                        "name": "meta.assertion.look-behind.regexp"
                    },
                    "6": {
                        "name": "meta.assertion.negative-look-behind.regexp"
                    }
                },
                "end": "(\\))",
                "endCaptures": {
                    "1": {
                        "name": "punctuation.definition.group.regexp"
                    }
                },
                "patterns": [
                    {
                        "include": "#regexp"
                    }
                ]
            },
            {
                "name": "meta.group.regexp",
                "begin": "\\((?:(\\?:)|(?:\\?<([a-zA-Z_$][\\w$]*)>))?",
                "beginCaptures": {
                    "0": {
                        "name": "punctuation.definition.group.regexp"
                    },
                    "1": {
                        "name": "punctuation.definition.group.no-capture.regexp"
                    },
                    "2": {
                        "name": "variable.other.regexp"
                    }
                },
                "end": "\\)",
                "endCaptures": {
                    "0": {
                        "name": "punctuation.definition.group.regexp"
                    }
                },
                "patterns": [
                    {
                        "include": "#regexp"
                    }
                ]
            },
            {
                "name": "constant.other.character-class.set.regexp",
                "begin": "(\\[)(\\^)?",
                "beginCaptures": {
                    "1": {
                        "name": "punctuation.definition.character-class.regexp"
                    },
                    "2": {
                        "name": "keyword.operator.negation.regexp"
                    }
                },
                "end": "(\\])",
                "endCaptures": {
                    "1": {
                        "name": "punctuation.definition.character-class.regexp"
                    }
                },
                "patterns": [
                    {
                        "name": "constant.other.character-class.range.regexp",
                        "match": "(?:.|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))\\-(?:[^\\]\\\\]|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))",
                        "captures": {
                            "1": {
                                "name": "constant.character.numeric.regexp"
                            },
                            "2": {
                                "name": "constant.character.control.regexp"
                            },
                            "3": {
                                "name": "constant.character.escape.backslash.regexp"
                            },
                            "4": {
                                "name": "constant.character.numeric.regexp"
                            },
                            "5": {
                                "name": "constant.character.control.regexp"
                            },
                            "6": {
                                "name": "constant.character.escape.backslash.regexp"
                            }
                        }
                    },
                    {
                        "include": "#regex-character-class"
                    }
                ]
            },
            {
                "include": "#regex-character-class"
            }
        ]
    },
    "regex-character-class": {
        "patterns": [
            {
                "name": "constant.other.character-class.regexp",
                "match": "\\\\[wWsSdDtrnvf]|\\."
            },
            {
                "name": "constant.character.numeric.regexp",
                "match": "\\\\([0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4})"
            },
            {
                "name": "constant.character.control.regexp",
                "match": "\\\\c[A-Z]"
            },
            {
                "name": "constant.character.escape.backslash.regexp",
                "match": "\\\\."
            }
        ]
    }
  },
  "scopeName": "source.tjs",
  "uuid": "7a013d9e-6b1a-4ff8-8550-58ee884cd846"
}